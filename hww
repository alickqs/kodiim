{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/alickqs/kodiim/blob/main/hww\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# титаник:"
      ],
      "metadata": {
        "id": "HiDOGT1VJK0c"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Импортируем необходимые библиотеки\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from collections import Counter\n",
        "from sklearn.metrics import mean_absolute_error"
      ],
      "metadata": {
        "id": "0KagsMNRDDVT"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Загрузим датасет\n",
        "data = pd.read_csv(\"https://raw.githubusercontent.com/rolandmueller/titanic/main/titanic3.csv\")\n",
        "X = data.drop(\"survived\", axis = 1)\n",
        "y = data[\"survived\"]"
      ],
      "metadata": {
        "id": "3rL__eD6DG8o"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Заменим категориальные переменные на числовые (слова на цифры, потому что наша модель понимает только цифры)\n",
        "X['sex'] = X['sex'].map({'female': 0, 'male': 1})\n",
        "# Удалим столбцы, которые мы не будем использовать в качестве признаков\n",
        "X = X.drop(['name', 'ticket', 'cabin', 'embarked', 'home.dest', 'boat'], axis=1)\n",
        "# Заполним пропущенные значения средними значениями"
      ],
      "metadata": {
        "id": "y9hHhOJUD8Ko"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Заполняем пропуски средними значениями\n",
        "X = X.fillna(X.mean ())\n",
        "y = y.fillna(y.mean ())"
      ],
      "metadata": {
        "id": "SIzyg9z3DIv9"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#делим на выборки\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y)"
      ],
      "metadata": {
        "id": "8A7VAgYNDeHg"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Напишем свой класс для классификации\n",
        "\n",
        "class KNNClassifier:\n",
        "    def __init__(self, k=3):\n",
        "        self.k = k\n",
        "        self.X_train = None\n",
        "        self.y_train = None\n",
        "\n",
        "    def fit(self, X_train, y_train):\n",
        "        \"\"\"\n",
        "        Метод для обучения модели на тренировочных данных.\n",
        "\n",
        "        Parameters:\n",
        "        - X_train: массив признаков тренировочных данных\n",
        "        - y_train: массив целевых значений тренировочных данных\n",
        "        \"\"\"\n",
        "        # Заменяем пропуски на np.nan\n",
        "        self.X_train = X_train.apply(pd.to_numeric, errors='coerce').values\n",
        "        self.y_train = y_train.values\n",
        "\n",
        "    def predict(self, X_test):\n",
        "        \"\"\"\n",
        "        Метод для предсказания классов на тестовых данных.\n",
        "\n",
        "        Parameters:\n",
        "        - X_test: массив признаков тестовых данных\n",
        "\n",
        "        Returns:\n",
        "        - y_pred: массив предсказанных классов\n",
        "        \"\"\"\n",
        "        # Заменяем пропуски на np.nan\n",
        "        X_test = X_test.replace('', np.nan)\n",
        "        X_test = X_test.apply(pd.to_numeric, errors='coerce').values\n",
        "\n",
        "        y_pred = []\n",
        "        # проходимся по всем строкам, для каждой нужно сделать предсказание\n",
        "\n",
        "        for y, x in X_test.iterrows():\n",
        "            # считаем расстояния до всех строк из трейна\n",
        "            distances = sum((X.loc[10] - X.loc[11]) ** 2)\n",
        "\n",
        "            # Индексы ближайших соседей\n",
        "            indices = np.argsort(distances)[:self.k]\n",
        "\n",
        "            # Значения целевой переменной для соседей\n",
        "            neighbors_values = self.y_train[indices]\n",
        "            # Находим наиболее часто встречающийся класс среди соседей\n",
        "            most_common_class = knn.predict(np.array([[2, 0], [0, 2]]))\n",
        "            y_pred.append(most_common_class)\n",
        "\n",
        "        return np.array(y_pred)"
      ],
      "metadata": {
        "id": "zi8xprZnDoQA"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Напишем свой класс для регрессии\n",
        "\n",
        "class KNNRegressor:\n",
        "    def __init__(self, k=13):\n",
        "        self.k = k\n",
        "        self.X_train = None\n",
        "        self.y_train = None\n",
        "\n",
        "    def fit(self, X_train, y_train):\n",
        "        \"\"\"\n",
        "        Метод для обучения модели на тренировочных данных.\n",
        "\n",
        "        Parameters:\n",
        "        - X_train: массив признаков тренировочных данных\n",
        "        - y_train: массив целевых значений тренировочных данных\n",
        "        \"\"\"\n",
        "        # Заменяем пропуски на np.nan\n",
        "        X_train.replace('', np.nan, inplace=True)\n",
        "        X_train = X_train.apply(pd.to_numeric, errors='coerce')\n",
        "        X_train = X_train.dropna()\n",
        "        self.X_train = X_train.values\n",
        "\n",
        "        # Заменяем пропуски на np.nan\n",
        "        y_train.replace('', np.nan, inplace=True)\n",
        "        y_train = y_train.apply(pd.to_numeric, errors='coerce')\n",
        "        y_train = y_train.dropna()\n",
        "        self.y_train = y_train.values\n",
        "\n",
        "    def predict(self, X_test):\n",
        "        \"\"\"\n",
        "        Метод для предсказания значений на тестовых данных.\n",
        "\n",
        "        Parameters:\n",
        "        - X_test: массив признаков тестовых данных\n",
        "\n",
        "        Returns:\n",
        "        - y_pred: массив предсказанных значений\n",
        "        \"\"\"\n",
        "        # Заменяем пропуски на np.nan\n",
        "        X_test.replace('', np.nan, inplace=True)\n",
        "        X_test = X_test.apply(pd.to_numeric, errors='coerce')\n",
        "        X_test = X_test.dropna()\n",
        "        X_test = X_test.values\n",
        "\n",
        "        y_pred = []\n",
        "        # проходимся по всем строкам, для каждой нужно сделать предсказание\n",
        "        count = 0\n",
        "        for y, x in X_test.iterrows():\n",
        "            # считаем расстояния до всех строк из трейна\n",
        "            distances = sum((X.loc[count] - X.loc[count+1]) ** 2)\n",
        "            count += 1\n",
        "\n",
        "            # Индексы ближайших соседей\n",
        "            indices = np.argsort(distances)[:self.k]\n",
        "\n",
        "            # Значения целевой переменной для соседей\n",
        "            neighbors_values = self.y_train[indices]\n",
        "            # берем среднее среди соседей\n",
        "            most_common_class = knn.predict(np.array([[2, 0], [0, 2]]))\n",
        "            y_pred.append(most_common_class)\n",
        "\n",
        "        return np.array(y_pred)"
      ],
      "metadata": {
        "id": "ssAcQpPjDuFJ"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train)"
      ],
      "metadata": {
        "id": "VI1HjF4DEi9Q",
        "outputId": "131ae420-fbbb-477e-9278-cba941d9ae3e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      pclass  sex        age  sibsp  parch      fare        body\n",
            "319        1    0  31.000000      0      0  134.5000  160.809917\n",
            "326        2    1  18.000000      0      0   11.5000  160.809917\n",
            "1202       3    1  29.881135      0      0    8.0500  160.809917\n",
            "342        2    0  36.000000      0      3   39.0000  160.809917\n",
            "714        3    1  32.000000      0      0   56.4958  160.809917\n",
            "...      ...  ...        ...    ...    ...       ...         ...\n",
            "584        2    0  32.500000      0      0   13.0000  160.809917\n",
            "437        2    0  24.000000      1      2   65.0000  160.809917\n",
            "145        1    1  48.000000      1      0   76.7292  160.809917\n",
            "1016       3    1  29.881135      0      0    7.7500  160.809917\n",
            "491        2    1  29.881135      0      0   15.0458  160.809917\n",
            "\n",
            "[981 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "# Инициализируем модель KNNClassifier с количеством соседей, равным 3\n",
        "neigh = KNeighborsClassifier(n_neighbors=3)\n",
        "# Обучаем модель на тренировочных данных\n",
        "neigh.fit(X_train, y_train)\n",
        "# Предсказываем значения на тестовых данных\n",
        "y_pred = neigh.predict(X_test)"
      ],
      "metadata": {
        "id": "soKszfA9EDl5"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Оценим точность предсказаний\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(f'Точность предсказания: {accuracy * 100:.2f}%')\n",
        "# Выведем отчет по классификации и матрицу ошибок\n",
        "print(\"\\nОтчет по классификации:\\n\", classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "cIMaLXryFENP",
        "outputId": "633db891-fa4b-4112-f9a9-ea3c6eb3ecc3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Точность предсказания: 71.95%\n",
            "\n",
            "Отчет по классификации:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.78      0.78       206\n",
            "           1       0.62      0.61      0.62       122\n",
            "\n",
            "    accuracy                           0.72       328\n",
            "   macro avg       0.70      0.70      0.70       328\n",
            "weighted avg       0.72      0.72      0.72       328\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Инициализируем список для сохранения точности\n",
        "accuracy_scores = []\n",
        "\n",
        "# Попробуем разные значения k\n",
        "for k in range(1, 21):\n",
        "    neigh = KNeighborsClassifier(n_neighbors=k)\n",
        "    neigh.fit(X_train, y_train)\n",
        "    y_pred = neigh.predict(X_test)\n",
        "    accuracy = accuracy_score(y_test, y_pred)\n",
        "    accuracy_scores.append(accuracy)\n",
        "\n",
        "# Построим график\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(range(len(accuracy_scores)), accuracy_scores, marker='o', linestyle='dashed', color='blue', markersize=8)\n",
        "plt.title('Зависимость точности от количества соседей (k)')\n",
        "plt.xlabel('Количество соседей (k)')\n",
        "plt.ylabel('Точность')\n",
        "plt.xticks(range(1, 21))\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "IaP4R97RHjZP",
        "outputId": "2ff8c559-da36-4540-ddd7-c4b22af599b7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Отели:"
      ],
      "metadata": {
        "id": "_M8ls_42JVfk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.datasets import fetch_california_housing\n",
        "# Загрузим датасет\n",
        "california_housing = fetch_california_housing()\n",
        "data = pd.DataFrame(california_housing.data, columns=california_housing.feature_names)\n",
        "data['PRICE'] = california_housing.target"
      ],
      "metadata": {
        "id": "PYkH85sKJZyz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Выберем признаки и целевую переменную\n",
        "X_reg = data.drop('PRICE', axis=1)\n",
        "y_reg = data['PRICE']"
      ],
      "metadata": {
        "id": "tkLZWbEyKJdb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Разделим данные на тренировочные и тестовые\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_reg, y_reg)"
      ],
      "metadata": {
        "id": "HDKzpeL0KL0w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsRegressor\n",
        "# Инициализируем и обучим модель KNN регрессии\n",
        "knn_regressor = KNeighborsRegressor()\n",
        "knn_regressor.fit(X_train, y_train)"
      ],
      "metadata": {
        "id": "CEWYfWHCV7SR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Предсказание на тестовых данных\n",
        "y_pred = knn_regressor.predict(X_test)"
      ],
      "metadata": {
        "id": "o7m7hFLWWVXH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Оценка производительности модели\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "print(f'Mean Absolute Error: {mae}')"
      ],
      "metadata": {
        "id": "KR9M30ZbWmTp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Визуализация предсказанных значений и фактических значений\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.scatterplot(x=y_test, y=y_pred)\n",
        "plt.xlabel('Фактическая цена')\n",
        "plt.ylabel('Предсказанная цена')\n",
        "plt.title('Визуализация предсказанных и фактических цен (KNN Regressor)')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "EnvGeIHlXTm9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Инициализируем список для сохранения средней абсолютной ошибки\n",
        "mae_scores = []\n",
        "\n",
        "# Попробуем разные значения k\n",
        "for k in range(1, 20):\n",
        "    knn_regressor = KNeighborsRegressor()\n",
        "    knn_regressor.fit(X_train, y_train)\n",
        "    y_pred = knn_regressor.predict(X_test)\n",
        "    mae = mean_absolute_error(y_test, y_pred)\n",
        "    mae_scores.append(mae)\n",
        "\n",
        "# Построим график\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot(range(19), mae_scores, marker='o', linestyle='dashed', color='green', markersize=8)\n",
        "plt.title('Зависимость MAE от количества соседей (k)')\n",
        "plt.xlabel('Количество соседей (k)')\n",
        "plt.ylabel('Mean Absolute Error')\n",
        "plt.xticks(range(20))\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "-izYQPcQXbG9"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}